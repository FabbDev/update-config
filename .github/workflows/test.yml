name: Test
# THIS IS FOR TESTING THE ACTION: DO NOT USE IT IN YOUR DRUPAL PROJECT, USE
# workflow-templates/update-config-branch.yml instead.
#
# Secrets
# - TEST_CONFIG_REPO_TOKEN: A token with write access to the test config repo.
# - TEST_SITE_REPO_TOKEN: A token with write access to the test site repo.
# Variables
# - TEST_CONFIG_REPO: The GitHub config repo for use with the test.
# - TEST_SITE_REPO: The GitHub site repo for use with the test.

on:
  push:
    branches:
      - main
      - development
  pull_request:
    branches:
      - main
      - development
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 0 1 * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-initial-setup:
#    if: false
    name: Test mirroring the config repo to the site repo (ie initial setup)
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-job
    env:
      test_config_repo_branch: "${{ github.job }}-main"
      test_site_repo_config_branch: "${{ github.job }}-config-only"
      test_site_repo_pr_branch: "${{ github.job }}-automatic-config-export"
      test_site_repo_pr_branch_base: "${{ github.job }}-staging"

    steps:

      - uses: actions/checkout@v4
        with:
          path: test/update-config

      - uses: ./test/update-config/.github/actions/test-setup
        with:
          branch_prefix: "${{ github.job }}-"
          test_config_repo: ${{ vars.TEST_CONFIG_REPO }}
          test_config_repo_token: ${{ secrets.TEST_CONFIG_REPO_TOKEN }}
          test_config_repo_branch: ${{ env.test_config_repo_branch }}
          test_site_repo: ${{ vars.TEST_SITE_REPO }}
          test_site_repo_token: ${{ secrets.TEST_SITE_REPO_TOKEN }}
          test_site_repo_config_branch: ${{ env.test_site_repo_config_branch }}
          test_site_repo_pr_branch: ${{ env.test_site_repo_pr_branch }}
          test_site_repo_pr_branch_base: ${{ env.test_site_repo_pr_branch_base }}

      - uses: ./test/update-config
        with:
          config_repo: ${{ vars.TEST_CONFIG_REPO }}
          config_repo_token: ${{ secrets.TEST_CONFIG_REPO_TOKEN }}
          config_repo_branch: ${{ env.test_config_repo_branch }}
          site_repo: ${{ vars.TEST_SITE_REPO }}
          site_repo_token: ${{ secrets.TEST_SITE_REPO_TOKEN }}
          site_repo_config_branch: ${{ env.test_site_repo_config_branch }}
          site_repo_pr_branch: ${{ env.test_site_repo_pr_branch }}
          site_repo_pr_branch_base: ${{ env.test_site_repo_pr_branch_base }}

      - uses: ./test/update-config/.github/actions/test-assertions
        with:
          test_config_repo_branch: ${{ env.test_config_repo_branch }}
          test_site_repo_config_branch: ${{ env.test_site_repo_config_branch }}

      - name: Assert the state after running the action
        env:
          GH_TOKEN: ${{ secrets.TEST_SITE_REPO_TOKEN }}
        working-directory: test
        run: |
          # Assert the state after running the action
          set -eu
          exit=0
          
          cd site
          git checkout ${{ env.test_site_repo_pr_branch_base }}
          if [[ "$(gh pr list --json id)" != "[]" ]]; then
            echo "There shouldn't be a PR after running the action the first time to create the config-only branch." >> "$GITHUB_STEP_SUMMARY"
            exit=1
          fi
          
          exit $exit
          
      - uses: ./test/update-config/.github/actions/test-teardown
        if: ${{ always() }}
        with:
          branch_prefix: "${{ github.job }}-"

  test-create-pr:
    if: false
    name: Test updating the mirrored config branch and creating a PR from it.
    runs-on: ubuntu-latest
    env:
      test_config_repo_branch: "${{ github.job }}-main"
      test_site_repo_config_branch: "${{ github.job }}-config-only"
      test_site_repo_pr_branch: "${{ github.job }}-automatic-config-export"
      test_site_repo_pr_branch_base: "${{ github.job }}-staging"
    steps:

      - uses: actions/checkout@v4
        with:
          path: test/update-config

      - uses: ./test/update-config/.github/actions/test-setup
        with:
          branch_prefix: "${{ github.job }}-"
          test_config_repo: ${{ vars.TEST_CONFIG_REPO }}
          test_config_repo_token: ${{ secrets.TEST_CONFIG_REPO_TOKEN }}
          test_config_repo_branch: ${{ env.test_config_repo_branch }}
          test_site_repo: ${{ vars.TEST_SITE_REPO }}
          test_site_repo_token: ${{ secrets.TEST_SITE_REPO_TOKEN }}
          test_site_repo_config_branch: ${{ env.test_site_repo_config_branch }}
          test_site_repo_pr_branch: ${{ env.test_site_repo_pr_branch }}
          test_site_repo_pr_branch_base: ${{ env.test_site_repo_pr_branch_base }}

      # TODO FACTOR OUT COMMON ASSERTIONS, POST TEST NORMALIZATION AND TEAR DOWN.

      - name: 'Test setup for testing creating a PR'
        working-directory: test
        run: |
          set -eu
          cd site
          git remote add remote-config ../remote
          git fetch remote-config
          git checkout -b ${{ env.test_site_repo_config_branch }} remote-config/${{ env.test_config_repo_branch }}^
          git rev-parse HEAD # REMOVE ME!
          tmp_dir=$(mktemp -d)
          cp * "$tmp_dir"
          git push origin HEAD
          git remote -v # REMOVE ME!
          
          git checkout ${{ env.test_site_repo_pr_branch_base }}
          rm config/sync/*
          cp -r "$tmp_dir"/* config/sync
          git add .
          git commit --amend -m "Update"
          git push origin HEAD --force

      - uses: ./test/update-config
        with:
          config_repo: ${{ vars.TEST_CONFIG_REPO }}
          config_repo_token: ${{ secrets.TEST_CONFIG_REPO_TOKEN }}
          config_repo_branch: ${{ env.test_config_repo_branch }}
          site_repo: ${{ vars.TEST_SITE_REPO }}
          site_repo_token: ${{ secrets.TEST_SITE_REPO_TOKEN }}
          site_repo_config_branch: ${{ env.test_site_repo_config_branch }}
          site_repo_pr_branch: ${{ env.test_site_repo_pr_branch }}
          site_repo_pr_branch_base: ${{ env.test_site_repo_pr_branch_base }}

      - name: Assert the state after running the action
        env:
          GH_TOKEN: ${{ secrets.TEST_SITE_REPO_TOKEN }}
        working-directory: test
        run: |
          # Assert the state after running the action
          set -eux
          exit=0
          
          git -C site fetch origin ${{ env.test_site_repo_config_branch }}
          git -C remote fetch origin ${{ env.test_config_repo_branch }}
          
          if [[ "$(git -C remote rev-parse origin/${{ env.test_config_repo_branch }})" != "$(git -C site rev-parse origin/${{ env.test_site_repo_config_branch }})" ]]; then
            echo "**TEST FAILURE:** The Drupal site repo's config-only branch wasn't in sync with the config repo's main branch." >> "$GITHUB_STEP_SUMMARY"
            exit=1
          fi
          
          cd site
          git fetch
          git checkout ${{ env.test_site_repo_pr_branch_base }}
          if [[ "$(gh pr list -H ${{ env.test_site_repo_pr_branch }} --json id)" == "[]" ]]; then
            echo "**TEST FAILURE:** There should be a PR created." >> "$GITHUB_STEP_SUMMARY"
            exit=1
          fi
          
          exit $exit

      - uses: ./test/update-config/.github/actions/test-teardown
        if: ${{ always() }}
        with:
          branch_prefix: "${{ github.job }}-"

  test-existing-pr:
    if: false
    name: Test updating an existing PR.
    runs-on: ubuntu-latest
    env:
      test_config_repo_branch: "${{ github.job }}-main"
      test_site_repo_config_branch: "${{ github.job }}-config-only"
      test_site_repo_pr_branch: "${{ github.job }}-automatic-config-export"
      test_site_repo_pr_branch_base: "${{ github.job }}-staging"
    steps:

      - uses: actions/checkout@v4
        with:
          path: test/update-config

      - uses: ./test/update-config/.github/actions/test-setup
        with:
          branch_prefix: "${{ github.job }}-"
          test_config_repo: ${{ vars.TEST_CONFIG_REPO }}
          test_config_repo_token: ${{ secrets.TEST_CONFIG_REPO_TOKEN }}
          test_config_repo_branch: ${{ env.test_config_repo_branch }}
          test_site_repo: ${{ vars.TEST_SITE_REPO }}
          test_site_repo_token: ${{ secrets.TEST_SITE_REPO_TOKEN }}
          test_site_repo_config_branch: ${{ env.test_site_repo_config_branch }}
          test_site_repo_pr_branch: ${{ env.test_site_repo_pr_branch }}
          test_site_repo_pr_branch_base: ${{ env.test_site_repo_pr_branch_base }}

      # TODO FACTOR OUT COMMON ASSERTIONS, POST TEST NORMALIZATION AND TEAR DOWN.

      - name: 'Test setup for testing updating an existing PR'
        env:
          GH_TOKEN: ${{ secrets.TEST_SITE_REPO_TOKEN }}
        working-directory: test
  # TODO: See if I'm only using git config.name etc. as few times as pos
        run: |
          set -eux
          cd site
          # Ensure the site repo config branch is behind the config repo.
          git remote add remote-config ../remote
          git fetch remote-config
          git checkout -b ${{ env.test_site_repo_config_branch }} remote-config/${{ env.test_config_repo_branch }}^
          tmp_dir=$(mktemp -d)
          cp * "$tmp_dir"
          git push origin HEAD
          
          # Set up an existing PR.
          git checkout ${{ env.test_site_repo_pr_branch_base }}
          rm config/sync/*
          touch config/sync/test-existing-pr
          git add config/sync
          git commit --amend -m "Initial commmit"
          git push origin HEAD --force
          
          git checkout -b ${{ env.test_site_repo_pr_branch }}
          cp -r "$tmp_dir"/* config/sync
          git add config/sync
          git commit -m "Update"
          git push origin HEAD
          
          gh pr create --base ${{ env.test_site_repo_pr_branch_base }} --title "Test PR" --body "Test PR"
          
          rm -rf "$tmp_dir"

      - uses: ./test/update-config
        with:
          config_repo: ${{ vars.TEST_CONFIG_REPO }}
          config_repo_token: ${{ secrets.TEST_CONFIG_REPO_TOKEN }}
          config_repo_branch: ${{ env.test_config_repo_branch }}
          site_repo: ${{ vars.TEST_SITE_REPO }}
          site_repo_token: ${{ secrets.TEST_SITE_REPO_TOKEN }}
          site_repo_config_branch: ${{ env.test_site_repo_config_branch }}
          site_repo_pr_branch: ${{ env.test_site_repo_pr_branch }}
          site_repo_pr_branch_base: ${{ env.test_site_repo_pr_branch_base }}

      - name: Assert the state after running the action
        env:
          GH_TOKEN: ${{ secrets.TEST_SITE_REPO_TOKEN }}
        working-directory: test
        run: |
          # Assert the state after running the action
          set -eux
          exit=0
          
          git -C site fetch origin ${{ env.test_site_repo_config_branch }}
          git -C remote fetch origin ${{ env.test_config_repo_branch }}
          
          if [[ "$(git -C remote rev-parse origin/${{ env.test_config_repo_branch }})" != "$(git -C site rev-parse origin/${{ env.test_site_repo_config_branch }})" ]]; then
            echo "**TEST FAILURE:** The Drupal site repo's config-only branch wasn't in sync with the config repo's main branch." >> "$GITHUB_STEP_SUMMARY"
            exit=1
          fi
          
          cd site
          git fetch
          git checkout ${{ env.test_site_repo_pr_branch_base }}
          if [[ "$(gh pr list -H ${{ env.test_site_repo_pr_branch }} --json id)" == "[]" ]]; then
            echo "**TEST FAILURE:** There should still be an existing PR." >> "$GITHUB_STEP_SUMMARY"
            exit=1
          fi
          
          exit $exit

      - uses: ./test/update-config/.github/actions/test-teardown
        if: ${{ always() }}
        with:
          branch_prefix: "${{ github.job }}-"

# TODO: TEST UPDATE'S PRESENT BUT MAKE NO DIFFERENCE
