name: Setup for test
description: Prepares test repos for automated testing.
# TODO: Delete any open PRs on the site repo.

inputs:
  test_config_repo:
    description: The GitHub config repo for use with the test.
    type: string
    required: true
  test_config_repo_token:
    description: A token with write access to the test config repo.
    type: string
    required: true
  test_config_repo_branch:
    description: The main branch on the config repository.
    type: string
    required: true
  test_site_repo:
    description: The GitHub site repo for use with the test.
    type: string
    required: true
  test_site_repo_token:
    description: A token with write access to the test site repo.
    type: string
    required: true
  test_site_repo_config_branch:
    description: The branch on the site repository that mirrors the config repository.
    type: string
    required: true
  test_site_repo_pr_branch:
    description: The name of the topic branch to create on the site repository with config changes.
    type: string
    required: true
  test_site_repo_pr_branch_base:
    description: The branch on the site repository from which to create the PR branch.
    type: string
    required: true

#  DO I WANT?
  branch_prefix:
    description: The prefix used for test branches.
    type: string
    required: true

runs:
  using: composite
  steps:

    - uses: actions/checkout@v4
      with:
        repository: ${{ inputs.test_site_repo }}
        token: ${{ inputs.test_site_repo_token }}
        path: test/site
        fetch-depth: 0

    - uses: actions/checkout@v4
      with:
        repository: ${{ inputs.test_config_repo }}
        token: ${{ inputs.test_config_repo_token }}
        path: test/remote
        fetch-depth: 0

    - name: Setup for test
      shell: bash
      working-directory: test
      run: |
        # Setup for test
        set -eux
        git config --global user.name 'Test User'
        git config --global user.email 'test@example.com'

        pushd remote
        git checkout --orphan ${{ inputs.test_config_repo_branch }}-new
        git rm -rf .
        touch c d e
        git add .
        git commit -m "Add initial mock config"
        echo modified > c
        git add c
        git commit -m "Updated c"
        git push origin HEAD:${{ inputs.test_config_repo_branch }} --force
        git checkout ${{ inputs.test_config_repo_branch }}
        git reset --hard origin/${{ inputs.test_config_repo_branch }}
        # git branch -d new-main
        popd

        pushd site
        
        # DO I WANT THIS HERE?
        #git for-each-ref "refs/remotes/origin/${{ inputs.branch_prefix }}*" --format '%(refname:short)' | while read refname
        #  do git push -d origin ${refname//'origin/'/}
        #done
        
        git checkout --orphan ${{ inputs.test_site_repo_pr_branch_base }}-new
        git rm -rf .
        mkdir -p a z config/sync
        cp -r ../remote/* config/sync
        touch {a,z}/.gitkeep b
        git config user.name 'Test User'
        git config user.email 'test@example.com'
        git add .
        git commit -m "Add mock Drupal site"
        git push origin HEAD:${{ inputs.test_site_repo_pr_branch_base }} --force
        cat config/sync/* # REMOVE ME!
        git checkout ${{ inputs.test_site_repo_pr_branch_base }}
        git reset --hard origin/${{ inputs.test_site_repo_pr_branch_base }}
        #git branch -d new-${{ inputs.test_site_repo_pr_branch_base }}

        
        # THESE MIGHT NOT BE NECESSARY HERE, IT'S JUST DEFENSIVE
        #if git show-branch remotes/origin/${{ inputs.test_site_repo_config_branch }} &> /dev/null; then
        #  git push -d origin ${{ inputs.test_site_repo_config_branch }}
        #fi
        # IF THE FOLLOWING'S REMOVED, LOOKS LIKE WE DON'T NEED TO KNOW THE PR BRANCH FOR THIS ACTION
        #if git show-branch remotes/origin/${{ inputs.test_site_repo_pr_branch }} &> /dev/null; then
        #  git push -d origin ${{ inputs.test_site_repo_pr_branch }}
        #fi

        #git push origin HEAD --force
        popd
